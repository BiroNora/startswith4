generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  school_id    Int      @id @default(autoincrement())
  om_id        String?
  name         String
  zip_code     String
  address      String
  dir_name     String?
  dir_phone    String?
  school_email String   @unique
  website      String?
  school_type  String[]
  coop         Boolean?
  note         String?
  city_id      Int
  country_id   Int
  county_id    Int
  region_id    Int
  event        Event[]
  city         City     @relation(fields: [city_id], references: [city_id])
  country      Country  @relation(fields: [country_id], references: [country_id])
  county       County   @relation(fields: [county_id], references: [county_id])
  region       Region   @relation(fields: [region_id], references: [region_id])

  @@map("schools")
}

model Contact {
  contact_id    Int     @id @default(autoincrement())
  contact_email String  @unique
  contact_name  String?
  contact_phone String?
  contact_note  String?

  @@map("contacts")
}

model ContactOnUserOnSchool {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  common    String[] @unique // contact_id, school_id, user_id

  @@map("contactonuseronschool")
}

model User {
  user_id       String   @id @default(uuid())
  name          String
  nationality   String
  phone         String
  user_email    String   @unique
  basic         Boolean?
  regionB       Int?
  medior        Boolean?
  regionM       Int?
  high          Boolean?
  regionH       Int?
  superior      Boolean?
  regionS       Int?
  director      Boolean?
  passwordHash  String
  userAuthToken String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  event         Event[]

  @@map("users")
}

model Event {
  event_id           Int                  @id @default(autoincrement())
  create_date        DateTime             @default(now())
  closing_date       DateTime
  event_type         EventType            @default(PRESENTATION)
  presented_student  Int?
  note               String?
  school_id          Int
  user_id            String
  School             School               @relation(fields: [school_id], references: [school_id])
  User               User                 @relation(fields: [user_id], references: [user_id])
  InterestedStudents InterestedStudents[]

  @@map("events")
}

model InterestedStudents {
  intrest_id Int       @id @default(autoincrement())
  event_id   Int
  count      Int
  city       String
  grade      Grade
  region     String
  notice     Notice
  applied    Boolean
  work_title String
  admission  Admission
  regionId   Int       @unique
  Event      Event     @relation(fields: [event_id], references: [event_id])

  @@map("interested")
}

model Activity {
  act_id          Int      @id @default(autoincrement())
  start_date      DateTime @default(now())
  end_date        DateTime
  act_name        String
  act_description String
  region          Int

  @@map("activity")
}

model Country {
  country_id   Int      @id @default(autoincrement())
  country_name String   @unique
  Region       Region[]
  School       School[]

  @@map("country")
}

model Region {
  region_id   Int      @id @default(autoincrement())
  region_name String   @unique
  country_id  Int
  County      County[]
  country     Country  @relation(fields: [country_id], references: [country_id])
  School      School[]

  @@map("region")
}

model County {
  county_id   Int      @id @default(autoincrement())
  county_name String   @unique
  region_id   Int
  city        City[]
  region      Region   @relation(fields: [region_id], references: [region_id])
  School      School[]

  @@map("county")
}

model City {
  city_id   Int      @id @default(autoincrement())
  city_name String   @unique
  county_id Int
  county    County   @relation(fields: [county_id], references: [county_id])
  School    School[]

  @@map("city")
}

// *** Please note: if the modal schooltype changes implement the school registration server as well

model SchoolType {
  id   Int    @id @default(autoincrement())
  type String

  @@map("schooltype")
}

enum Duty {
  SUPERIOR
  BASIC
  MEDIOR
  HIGH
}

enum EventType {
  PRESENTATION
  OPEN_DAY
  BY_PHONE
  BY_EMAIL
  TV
  RADIO
  ONLINE
  MEDIOR_LEAFLET
}

enum Grade {
  PREPARATORY
  CLASS_9
  CLASS_10
  CLASS_11
  CLASS_12
}

enum Notice {
  SCHOOL_PRESENTATION
  FAMILY
  TEACHER
  FRENDS
  CMM_MEMBER
  CHLC
  HIGH
  FACEBOOK
  ONLINE_PUBLICITY
}

enum Admission {
  ADMITTED
  REJECTED
  IN_PROGRESS
}
